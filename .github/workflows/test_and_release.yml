name: Test

on:
  push:
    branches: '*'
  pull_request:
    branches: '*'

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test sketch compilation
    outputs:
      md5sum: ${{ steps.md5sum.outputs.test }}
      filesize: ${{ steps.filesize.outputs.test }}
    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install gettext-base

      - uses: actions/checkout@v3
        with:
          submodules: recursive
          path: Riotee_ArduinoCore

      - name: Populate core from external sources
        run: cd Riotee_ArduinoCore && ./build_tree.sh

      - name: Create directory for server and core
        run: mkdir server core

      - name: Copy files into release dir
        run: cp -r Riotee_ArduinoCore/cores/ Riotee_ArduinoCore/variants/ Riotee_ArduinoCore/libraries/ Riotee_ArduinoCore/boards.txt Riotee_ArduinoCore/platform.txt Riotee_ArduinoCore/programmers.txt core

      - name: Zip the core
        run: zip -qq -r server/Riotee_ArduinoCore.zip core

      - name: Compute checksum of release zip
        run: echo "MD5SUM=$(md5sum server/Riotee_ArduinoCore.zip | head -n1 | awk '{print $1;}')" >> $GITHUB_ENV

      - name: Compute filesize of release zip
        run: echo "FILESIZE=$(wc -c server/Riotee_ArduinoCore.zip | head -n1 | awk '{print $1;}')" >> $GITHUB_ENV

      - name: Store md5 sum as output for release job
        id: md5sum
        run: echo "md5sum=$MD5SUM" >> $GITHUB_OUTPUT

      - name: Store filesize as output for release job
        id: filesize
        run: echo "filesize=$FILESIZE" >> $GITHUB_OUTPUT

      - name: Render template of package_index json
        run: envsubst < Riotee_ArduinoCore/package_index_cicd.tmpl > package_index.json

      - name: Install Arduino CLI
        run: sudo sh -c 'curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/bin sh'

      - name: Serve Files
        uses: Eun/http-server-action@v1
        with:
          directory: ${{ github.workspace }}/server
          port: 8000

      - name: Install core
        run: arduino-cli core install riotee:riotee --additional-urls file:///${{ github.workspace }}/package_index.json --log-level debug --verbose

      - name: Create blinky sketch to compile
        run: |
          mkdir blinky
          cat > blinky/blinky.ino << EOF
            void setup() {
              pinMode(LED_BUILTIN, OUTPUT);
            }

            void loop() {
              digitalWrite(LED_BUILTIN, HIGH);
              delay(1000);
              digitalWrite(LED_BUILTIN, LOW);
              delay(1000);
            }
          EOF

      - name: Compile blinky sketch
        run: arduino-cli compile -b riotee:riotee:RioteeBoard blinky --log-level debug --verbose

      - name: Upload artifact to github
        uses: actions/upload-artifact@v3
        with:
          name: core_zip
          path: server/Riotee_ArduinoCore.zip

  release:
    if: github.event_name == 'release' && github.event.action == 'created'
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Install dependencies
        run: sudo apt update && sudo apt install gettext-base

      - uses: actions/checkout@v3

      - run: echo ${{needs.test.outputs.md5sum}} >> $GITHUB_ENV
      - run: echo ${{needs.test.outputs.filesize}} >> $GITHUB_ENV

      - name: Store release tag in environment variable
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Render template of package_index json
        run: envsubst < package_index_snippet.tmpl > package_index_snippet.json

      - name: Upload snippet as artifact to github
        uses: actions/upload-artifact@v3
        with:
          name: package_index_snippet
          path: package_index_snippet.json

      - uses: actions/download-artifact@v3
        with:
          name: core_zip
      - run: mkdir output
      - run: cp Riotee_ArduinoCore.zip output/Riotee_ArduinoCore_${RELEASE_VERSION}.zip

      - name: Upload artifacts to webserver
        uses: SamKirkland/FTP-Deploy-Action@4.3.3
        with:
          server: www.riotee.nessie-circuits.de
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          local-dir: output/
          server-dir: /htdocs/riotee/arduino/release/
          protocol: ftps